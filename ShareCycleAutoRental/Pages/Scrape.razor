@page "/"

@using ShareCycleAutoRental.Data
@inject ScrapeService ScrapeService

    <h2>シェアサイクル自動レンタル</h2>

<div>
    <input placeholder="UserID" @bind="@loginInfo.UserID">
    <input placeholder="Password" type="password" @bind="@loginInfo.Password">
</div>
<div>
    <input placeholder="Area" @bind="@condition.Area">
    <input placeholder="Place" @bind="@condition.Place">
</div>
<div>
    <input placeholder="Port" @bind="@condition.Port">
</div>
<div>
    <input placeholder="Execution Minutes" @bind="@time">
</div>
<button @onclick="fetch" disabled="@buttonDisabled">スクレイピング</button>

@if (scrapeContents != null)
{
    <h2>@scrapeContents.BikeName を借りました。</h2>
}

<h2>@waitMessage</h2>

@code{
    private int time = 5;
    private DateTime endTime;
    private bool buttonDisabled = false;
    private string waitMessage = "";
    private BikeInfo scrapeContents = null;
    private LoginInfo loginInfo = new LoginInfo();
    private ScrapeCondition condition = new ScrapeCondition()
    {
        Area = "中央",
        Place = "京橋",
        Port = "B2-11"
    };
    private static System.Timers.Timer continueTimer;

    private void fetch()
    {
        endTime = DateTime.Now.AddMinutes(time);
        buttonDisabled = true;

        waitMessage = "検索中....";
        scrapeContents = null;

        continueTimer = new System.Timers.Timer(1000);
        continueTimer.Elapsed += OnTimedEvent;
        continueTimer.Enabled = true;
    }

    private void OnTimedEvent(object sender, System.Timers.ElapsedEventArgs e)
    {
        continueTimer.Enabled = false;

        //一定間隔過ぎてたらやめる
        if (DateTime.Now > endTime)
        {
            continueTimer.Stop();
            continueTimer.Dispose();
            buttonDisabled = false;
            waitMessage = "時間内に借りることができませんでした。";
            return;
        }

        // スクレイピング
        var result = ScrapeService.ScrapeShareAsync(loginInfo, condition).Result;

        //結果解析
        var donext = analyzeResult(result);

        switch (donext)
        {
            case ScrapeResult.error:
                continueTimer.Stop();
                continueTimer.Dispose();
                waitMessage = result.Message;
                buttonDisabled = false;
                break;
            case ScrapeResult.compleate:
                scrapeContents = result.ResultObject;
                if (scrapeContents == null)
                    waitMessage = "存在しませんでした。";
                else
                    waitMessage = "";
                continueTimer.Stop();
                continueTimer.Dispose();
                buttonDisabled = false;
                break;
            case ScrapeResult.canContinue:
                waitMessage = result.Message;
                continueTimer.Enabled = true;
                break;
        }

        waitMessage = $"{DateTime.Now} : {waitMessage}";

        //画面再描画
        InvokeAsync(() => StateHasChanged());
    }

    private ScrapeResult analyzeResult(Result<BikeInfo> result)
    {
        if (result.HasError)
        {
            if (result.Message.Contains("IDまたはパスワードが異なります。"))
            {
                return ScrapeResult.error;
            }
            else
            {
                return ScrapeResult.canContinue;
            }
        }
        else
        {
            return ScrapeResult.compleate;
        }
    }

    private enum ScrapeResult
    {
        compleate,
        canContinue,
        error,
    }
}